
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.28.0
 * Query Engine version: 89facabd0366f63911d089156a7a70125bfbcd27
 */
Prisma.prismaVersion = {
  client: "2.28.0",
  engine: "89facabd0366f63911d089156a7a70125bfbcd27"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ProvinceScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.CityScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  province_id: 'province_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  email: 'email',
  name: 'name',
  username: 'username',
  phone_number: 'phone_number',
  profile_picture_url: 'profile_picture_url',
  gender: 'gender',
  birthdate: 'birthdate',
  password: 'password',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
});

exports.Prisma.AdminsScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  email: 'email',
  name: 'name',
  username: 'username',
  phone_number: 'phone_number',
  profile_picture_url: 'profile_picture_url',
  gender: 'gender',
  password: 'password',
  is_active: 'is_active',
  created_at: 'created_at'
});

exports.Prisma.TokenScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  valid: 'valid',
  expiration: 'expiration',
  AdminsId: 'AdminsId'
});

exports.Prisma.UserPetsScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  name: 'name',
  species: 'species',
  breed: 'breed',
  date_of_birth: 'date_of_birth',
  color: 'color',
  profile_picture_url: 'profile_picture_url',
  gender: 'gender',
  is_neutered: 'is_neutered',
  is_dog_friendly: 'is_dog_friendly',
  is_cat_friendly: 'is_cat_friendly',
  is_under_10_child_friendly: 'is_under_10_child_friendly',
  is_over_10_child_friendly: 'is_over_10_child_friendly',
  is_microchipped: 'is_microchipped',
  is_purebred: 'is_purebred',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  UserId: 'UserId'
});

exports.Prisma.User_AddressScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  label: 'label',
  address: 'address',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  city_id: 'city_id',
  province_id: 'province_id',
  user_id: 'user_id'
});

exports.Prisma.User_BankScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  alias: 'alias',
  bank_name: 'bank_name',
  account_number: 'account_number',
  bank_username: 'bank_username',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  UserId: 'UserId'
});

exports.Prisma.Vendor_BankScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  alias: 'alias',
  bank_name: 'bank_name',
  account_number: 'account_number',
  bank_username: 'bank_username',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.VaccineTypeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.VaccineHistoryScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  pet_id: 'pet_id',
  veterinary: 'veterinary',
  vaccine_photo: 'vaccine_photo',
  date_administered: 'date_administered',
  is_manual: 'is_manual',
  date_valid_until: 'date_valid_until',
  vaccine_type_id: 'vaccine_type_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.VaccineHistoryPhotoScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  vaccine_history_id: 'vaccine_history_id',
  path: 'path',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.VendorsScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  email: 'email',
  is_verified: 'is_verified',
  vendor_role: 'vendor_role',
  price: 'price',
  total_patient: 'total_patient',
  rating: 'rating',
  name: 'name',
  username: 'username',
  address: 'address',
  phone_number: 'phone_number',
  profile_picture_url: 'profile_picture_url',
  gender: 'gender',
  speciality: 'speciality',
  birthdate: 'birthdate',
  google_maps_url: 'google_maps_url',
  str_number: 'str_number',
  str_issued_date: 'str_issued_date',
  alumni: 'alumni',
  city_id: 'city_id',
  province_id: 'province_id',
  lat: 'lat',
  long: 'long',
  days: 'days',
  ops_start_time: 'ops_start_time',
  ops_end_time: 'ops_end_time',
  duration: 'duration',
  rest: 'rest',
  total_poli: 'total_poli',
  image_url: 'image_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ScheduleScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  time_start: 'time_start',
  time_end: 'time_end',
  day_start: 'day_start',
  day_end: 'day_end',
  homecare_customer_limit: 'homecare_customer_limit',
  price: 'price',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Vendor_DocumentsScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  document_type: 'document_type',
  document_path: 'document_path',
  created_at: 'created_at',
  updated_at: 'updated_at',
  VendorsId: 'VendorsId'
});

exports.Prisma.Vendor_MedtreatsScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  medical_treatment_id: 'medical_treatment_id',
  is_homecare: 'is_homecare',
  created_at: 'created_at',
  updated_at: 'updated_at',
  VendorsId: 'VendorsId'
});

exports.Prisma.ClassScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
});

exports.Prisma.SpeciesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  ClassId: 'ClassId'
});

exports.Prisma.Medical_TreatmentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ConsultationsScalarFieldEnum = makeEnum({
  id: 'id',
  uid: 'uid',
  user_id: 'user_id',
  pet_id: 'pet_id',
  vendor_id: 'vendor_id',
  chat_room_id: 'chat_room_id',
  vendor_role: 'vendor_role',
  diagnose: 'diagnose',
  prerequisite: 'prerequisite',
  date: 'date',
  time_start: 'time_start',
  time_end: 'time_end',
  order_status: 'order_status',
  reject_reason: 'reject_reason',
  total_payment: 'total_payment',
  payment_image_url: 'payment_image_url',
  rating: 'rating',
  comment: 'comment',
  user_bank_id: 'user_bank_id',
  vendor_bank_id: 'vendor_bank_id',
  user_address_id: 'user_address_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ArticlesScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  content: 'content',
  species_id: 'species_id',
  image_url: 'image_url',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.FeedbacksScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  vendor_id: 'vendor_id',
  email: 'email',
  title: 'title',
  content: 'content',
  rating: 'rating',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});
exports.Gender = makeEnum({
  Male: 'Male',
  Female: 'Female'
});

exports.Type = makeEnum({
  Home_Care: 'Home_Care',
  Pet_Clinic: 'Pet_Clinic',
  Veterinary: 'Veterinary'
});

exports.Prisma.ModelName = makeEnum({
  Province: 'Province',
  City: 'City',
  User: 'User',
  Admins: 'Admins',
  Token: 'Token',
  UserPets: 'UserPets',
  User_Address: 'User_Address',
  User_Bank: 'User_Bank',
  Vendor_Bank: 'Vendor_Bank',
  VaccineType: 'VaccineType',
  VaccineHistory: 'VaccineHistory',
  VaccineHistoryPhoto: 'VaccineHistoryPhoto',
  Vendors: 'Vendors',
  Schedule: 'Schedule',
  Vendor_Documents: 'Vendor_Documents',
  Vendor_Medtreats: 'Vendor_Medtreats',
  Class: 'Class',
  Species: 'Species',
  Medical_Treatment: 'Medical_Treatment',
  Consultations: 'Consultations',
  Articles: 'Articles',
  Feedbacks: 'Feedbacks'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
